##!/bin/bash
# we: west metatool shorthand (for Zephyr builds)
# Copyright (c) 2024 Bluenetics GmbH
# SPDX-License-Identifier: Apache-2.0

#-------------------------------------------------------------------------------
# pimp -?;  pimp --help   # show usage
#-------------------------------------------------------------------------------

   if [ "$*" == "-?" ] || [ "$*" == "--help" ] || [ "$*" == "--?" ]; then
      ec -g   "usage: we - Zephyr build tool (version $(we --version))"
      echo    '  we                  # build & run in cur. dir (dongle hex => $TMP)'
      echo    '  we <project>        # build & run <project>'
      echo    '  we -b               # build project in current directory'
      echo    '  we -b <project>     # build specific project'
      echo    '  we -c               # clean build folder'
      echo    '  we -d               # build & run on dongle'
      echo    '  we -e               # erase flash memory'
      echo    '  we -f               # flash binary to target'
      echo    '  we -k               # open Kconfig menu'
      echo    '  we -p               # pristine build/flash/run in cur. dir (dongle hex => $TMP)'
      echo    '  we -r               # run built project'
      echo    '  we -r 19024         # run built project, send output to port 19024'
      echo    '  we -z               # show board and zephyr setup'
      ec -g   'deal with Zephyr version labels:'
      echo    '  . we z3.6:          # activate labeled Zephyr environment!'
      echo    "  we -! z3.6: comment # define Zephyr label"
      echo    '  we -l               # list Zephyr version labels'
      echo    '  we -L               # list Zephyr version labels with path'

      if [ "$*" != "-?" ]; then
        ec -g 'running a terminal:'
        echo  '  we -t0              # start tio terminal with auto USB detection'
        echo  '  we -t1              # start telnet terminal on port 19024'
        echo  '  we -t2              # start telnet terminal on port 19025'
        echo  '  we -t3              # start telnet terminal on port 19026'
      fi

      ec -g   'miscellaneous:'
      echo    '  we -?               # show usage'
      echo    '  we --help           # comprehensive help'
      echo    '  we --version        # print version'

      if [ "$*" != "-?" ]; then
        echo  '  we --boards         # list supported HW boards by west'
        echo  '  we --copy-tmp       # copy zephyr.hex to $TMP'
        echo  '  we --dongle-osx     # print dongle device (or list of) on OSX'
        echo  '  we --dongle-wsl     # print dongle device (or list of) on WSL'
        echo  '  we --flash-dongle   # flash to dongle(s)'
        echo  '  we --help-init      # help on west init'
#       echo  '  we --help-dk832     # how to build & run on nRF52832 DK'
#       echo  '  we --help-dongle    # how to build & run for nRF52840 dongle'
        echo  '  we --help-qemu      # how to build & run for QEMU'
        echo  '  we --pristine       # pristine build without flash/run'
        echo  '  we --telnet         # run a telnet terminal'
        echo  '  we --telnet 19024   # run a telnet terminal using port 19024'
        echo  '  we --tio            # run a tio terminal with auto USB detection'
        echo  '  we --tio /dev/usb12 # run a tio terminal woth given USB device'
        echo  '  we --unlock         # unlock flash memory'
        echo  '  we $ZEPHYR_BASE/samples/hello_world'
      fi

      echo    ''
      echo    '  see also: bd, cl, run, we'

      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
# we --version   # print version
#-------------------------------------------------------------------------------

   if [ "$*" == "--version" ] || [ "$*" == "--v" ]; then
      echo "1.0.20"
      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#-------------------------------------------------------------------------------
# examine whether this script is running in sourced/unsourced mode
# - note: each dispatching clause needs to unset _SOURCED
#-------------------------------------------------------------------------------

   (return 0 2>/dev/null) && _SOURCED=1 || _SOURCED=0  # determine _SOURCED

#-------------------------------------------------------------------------------
# . we <label:>   # select zephyr version
#-------------------------------------------------------------------------------

   if [ "${1%':'}" != "$1" ] && [ "$2" == "" ]; then
      if [ "$_SOURCED" != 0 ]; then
         _LABEL=${1%':'}
         _DIR=$(idb -r $ETC/zephyr $_LABEL dir)
         if [ -d "$_DIR" ]; then
            source pimp --activate $_DIR   # activate virtual environment
         else
            ec -r "error: . we $*"
            echo  "       bad virtual environment label"
         fi
         unset _DIR
         unset _LABEL
         unset _SOURCED
         return 0 2>/dev/null || exit 0  # safe return/exit
      else
         ec -r "error: we $*" >&2
         echo  "       source this command line: . we $*" >&2
         return 1 2>/dev/null || exit 1  # safe return/exit
      fi
   fi

#-------------------------------------------------------------------------------
# don't proceed without activated virtual environment
#-------------------------------------------------------------------------------

   if [ "$VIRTUAL_ENV" == "" ] && [ "$1" != "-l" ] && [ "$1" != "-L" ] \
         && [ "$1" != "-t" ] && [ "$1" != "-t0" ] && [ "$1" != "-t1" ] \
         && [ "$1" != "-t2" ] && [ "$1" != "-t3" ] && [ "$1" != "--telnet" ] \
         && [ "$1" != "--tio" ] && [ "$1" != "--tio-wsl" ]; then
      ec -r "error: we $*" >&2
      echo  "       no virtual environment activated!" >&2
      return 1 2>/dev/null || exit 1  # safe return/exit
   fi

#-------------------------------------------------------------------------------
# no sourced mode beyond this line!
#-------------------------------------------------------------------------------

	 if [ "$_SOURCED" != 0 ]; then
      ec -r "error: . we $*" >&2
      echo  "       bad command line: . we $*" >&2
      unset _SOURCED
      return 1 2>/dev/null || exit 1  # safe return/exit
   fi

#===============================================================================
# $ we --help-init  # help on west init
#===============================================================================

   if [ "$*" == "--help-init" ]; then
      ec -g 'help on west init'

      ec -y 'standard west init'
      echo  '  $ mkdir z3.6.99         # create folder for actual zephyr release'
      echo  '  $ cd z3.6.99            # vist folder for actual zephyr release'
      echo  '  $ vamos -c @z3.6.99     # create virtual python environment'
      echo  '  $ vamos                 # activate virtual python environment'
      echo  '  $ pip install west'     # install west
      ec -c '  $ west init             # init install folder with zephy stuff'
      echo  '  $ west update           # update zephyr installation'

      ec -y 'install specific zephyr installation (e.g., z3.6.0)'
      echo  '  $ mkdir z3.6.0          # create folder for actual zephyr release'
      echo  '  $ cd z3.6.0             # vist folder for actual zephyr release'
      echo  '  $ vamos -c @z3.6.0      # create virtual python environment'
      echo  '  $ vamos                 # activate virtual python environment'
      echo  '  $ pip install west'     # install west
      ec -c '  $ west init --mr v3.6.0 # init install folder with zephyr stuff'
      echo  '  $ west update           # update zephyr installation'

      exit 0
   fi

#===============================================================================
# how to build and run on QEMU
#===============================================================================

   if [ "$*" == "--help-qemu" ]; then
      ec -g 'how to build & run for QEMU'
      echo  '  navigate to the Zephyr project directory'
      ec -y 'choose one of the lines below to define emulator board'
      echo  '  $ export BOARD=qemu_cortex_m3  (QEMU cortex M3 board)'
      echo  '  $ export BOARD=qemu_x86        (QEMU x86 board)'
      ec -y 'build and run:'
      echo  '  $ we  #build and run'
      ec -y 'in separate steps:'
      echo  '  $ we -b  # build project'
      echo  '  $ we -r  # run project'
      exit 0
   fi

#===============================================================================
# run a telnet terminal: we --telnet <port>
# - if <port> argument is not specified the port specified by $TELPORT is used
# - if $TELPORT is also not specified then default port 19024 is used
#===============================================================================

   if [ "$1" == "--telnet" ]; then
      if [ "$3" != "" ]; then
        ec -r "error: we $*"
        we -?
        exit 1
      fi

      if [ "`which telnet`" == "" ]; then
         ec -r 'error: telnet is not installed!'
         echo  '       please install telnet first, before proceeding'
         exit 1
      fi

      if [ "$TELPORT" == "" ]; then
         TELPORT=19024
      fi

      if [ "$2" != "" ]; then
         TELPORT=$2
      fi

      while [ "1" == "1" ]; do
         ec -y "telnet localhost $TELPORT (quit with <ctrl-c>)"
         telnet localhost $TELPORT  # telnet connect using local port $TELPORT
         clear
         ec -g "Telnet Terminal: connect to localhost: $TELPORT"
         echo  "quit with <ctrl-c>"
         sleep 0.5
      done
      exit 0
   fi

#===============================================================================
# run a tio terminal: we --tio <usb>
# - if <usb> argument is not specified then a trial is made for automatic
#   identification of a dongle USB device
#===============================================================================

   if [ "$1" == "--tio" ]; then
      if [ "$3" != "" ]; then
        ec -r "error: we $*"
        we -?
        exit 1
      fi

      if [ "`which tio`" == "" ]; then
         ec -r 'error: tio is not installed!'
         echo  '       please install tio first, before proceeding'
         exit 1
      fi

        # get a list of possible USB devices

      if [ "$2" != "" ]; then
         USB=$2; N=1
      else
         USB=`ls /dev/tty* | grep usb | grep -v usbmodem000`
         N=`ls /dev/tty* | grep usb | grep -v usbmodem000 | wc -w`
      fi

      if [ $N == 0 ]; then
         ec -r 'no USB devices found'
         exit 1
      elif [ $N == 1 ]; then
         ec -y "tio $USB  # quit with <ctrl-t> <q>"
         tio $USB
         exit 0
      else
           select DEV in $USB
          do
            ec -y "tio $DEV  # quit with <ctrl-t> <q>"
             tio $DEV
             exit 0
          done
      fi

      exit 0
   fi

#===============================================================================
# run a tio terminal: we --tio-wsl <usb> # To run on Windows WSL
# - if <usb> argument is not specified then a trial is made for automatic
#   identification of a dongle USB device
#===============================================================================

   if [ "$1" == "--tio-wsl" ]; then
      if [ "$3" != "" ]; then
        ec -r "error: we $*"
        we -?
        exit 1
      fi

      if [ "`which tio`" == "" ]; then
         ec -r 'error: tio is not installed!'
         echo  '       please install tio first, before proceeding'
         exit 1
      fi

        # get a list of possible USB devices

      if [ "$2" != "" ]; then
         USB=$2; N=1
      else
         DEVICES=`ls /dev/serial/by-id`
         USB=''
         for DEV in $DEVICES
         do
            USB=$USB' /dev/serial/by-id/'$DEV
         done
         # ec -y $USB
         N=`ls /dev/serial/by-id | wc -w`
         # ec -y $N
      fi

      if [ $N == 0 ]; then
         ec -r 'no USB devices found'
         exit 1
      elif [ $N == 1 ]; then
         ec -y "tio $USB  # quit with <ctrl-t> <q>"
         tio $USB
         exit 0
      else
   	     select DEV in $USB
	       do
            ec -y "tio $DEV  # quit with <ctrl-t> <q>"
	          tio $DEV
	          exit 0
	       done
      fi

      exit 0
   fi

#===============================================================================
# start tio terminal with auto USB detection: we -t0
#===============================================================================

   if [ "$*" == "-t0" ]; then
      if [ -d "/dev/serial" ]
      then # windows WSL system
         we --tio-wsl || exit 1
      else # macOS or Linux system
         we --tio || exit 1
      fi
      exit 0
   fi

#===============================================================================
# start telnet on port 19024: we -t1
#===============================================================================

   if [ "$*" == "-t1" ] || [ "$*" == "-t" ]; then
      we --telnet 19024 || exit 1
      exit 0
   fi

#===============================================================================
# start telnet on port 19025: we -t2
#===============================================================================

   if [ "$*" == "-t2" ]; then
      we --telnet 19025 || exit 1
      exit 0
   fi

#===============================================================================
# start telnet on port 19026: we -t3
#===============================================================================

   if [ "$*" == "-t3" ]; then
      we --telnet 19026 || exit 1
      exit 0
   fi

#===============================================================================
# $ we -z  # show board and zephyr setup'
#===============================================================================

   if [ "$*" == "-z" ]; then
      ec -g 'West:'
      if [ "`which west`" == "" ]; then
         ec -r "  west is not available (setup a zephyr environment)"
      else
         echo "  `which west`"
      fi

        # board settings

      bash bd.sh

      if [ "$VIRTUAL_ENV" == "" ]; then
         ZPATH="???"
         ZVERS="???"
      else
         ZPATH=$(dirname $VIRTUAL_ENV)
         ZVERS=$(basename $ZPATH)
      fi

      ec -g "Zephyr version: $ZVERS"
      echo "  path: $ZPATH"

      return 0 2>/dev/null || exit 0  # safe return/exit
   fi

#===============================================================================
# check if west is available
#===============================================================================

   if [ "`which west`" == "" ]; then
      ec -r "error: west is not available"
      echo  '=> check activation of proper virtual Zephyr environment'
   fi

#===============================================================================
# set build folder
#===============================================================================

   if [ "$BUILD" == "" ]; then
      export BUILD=build
#     export BUILD=build_$BOARD
   fi

#===============================================================================
# we -k   # open Kconfig menu
#===============================================================================

   if [ "$*" == "-k" ]; then
      ec -y 'west  build -t menuconfig'
      west  build -t menuconfig || exit 1
      exit 0
   fi

#===============================================================================
# pristine build and run: 'we -p'
#===============================================================================

   if [ "$*" == "-p" ] || [ "$*" == "--pristine" ]; then
      PROJECT="."

      ec -y west build --pristine -b $BOARD $PROJECT
      # we -c
      west build --pristine -b $BOARD $PROJECT || exit 1

        # if board identifier refers to a dongle we copy zephyr.hex to $TMP
        # else we run program

      if [ "$BOARD" == "nrf52840dongle_nrf52840" ]; then
        we --copy-tmp || exit 1
      elif [ "$*" != "--pristine" ]; then
        if [ "$BOARD" != "qemu_x86" ] && [ "$BOARD" != "qemu_cortex_m3" ]; then
          we -f || exit 1  # flash program
        fi
        we -r || exit 1  # run program
      fi
      exit 0
   fi

#===============================================================================
# copy zephyr.hex to $TMP directory: we --copy-tmp
# - if board identifier refers to a dongle we first check whether
#   environment variable $TMP refers to a valid directory. If yes,
#   we copy zephyr.hex to the $TMP directory
#===============================================================================

   if [ "$*" == "--copy-tmp" ]; then
      if [ "$TMP" == "" ]; then
        ec -r 'error: empty environvent variable TMP'
        exit 1
      fi
      if [ ! -d "$TMP" ]; then
        ec -r "error: no directory: TMP=$TMP"
        exit 1
      fi

        # all is well => copy now zephyr.hex to $TMP

      ec -y "cp $BUILD/zephyr/zephyr.hex $TMP"
      cp $BUILD/zephyr/zephyr.hex $TMP || exit 1
      exit 0
   fi

#===============================================================================
# build program: we -b <project>
#===============================================================================

   if [ "$1" == "-b" ] && [ "$2" == "" ]; then
      PROJECT="."

      if [ -d "$(gih)/boards" ]; then  # if there is a boards folder in git home
         ec -y "export BOARD_ROOT=$(gih)"
         export BOARD_ROOT=$(gih)
      fi

      ec -y "west build -b $BOARD $PROJECT"
      west build -b $BOARD $PROJECT || exit 1

        # in case of a dongle create zip file which we can flash to the dongle

      if [ "$BOARD" == "nrf52840dongle_nrf52840" ]; then
         ZIP=$BUILD/zephyr/app-dongle.zip
         we ---create-zip $ZIP
      fi
      exit 0
   fi

#===============================================================================
# build (without run): we -b <project>
#===============================================================================

   if [ "$1" == "-b" ] && [ "$2" != "" ]; then
      PROJECT=$2
      ec -y west build -b $BOARD $PROJECT
      west build -b $BOARD $PROJECT || exit 1
      exit 0
   fi

#===============================================================================
# clean build folder: we -c
#===============================================================================

   if [ "$*" == "-c" ]; then
      rm -rf build || exit 1
      rm -rf build_* || exit 1
      exit 0
   fi

#===============================================================================
# flash binary to target: we -f
# - undef SEGGER if you want to flash with west flash runner
# - export SEGGER=xxxxxxxxx for flashing with nrfjprog
#===============================================================================

   if [ "$*" == "-f" ]; then
      if [ "$BOARD" == "nrf52840dongle_nrf52840" ]; then
         we --flash-dongle || exit 1
      elif [ "$SEGGER" != "" ]; then  # use nrfjprog if $SEGGER is defined
         we -e                        # erase flash memory area
         ec -g '=== flashing binary to target ...'

         ec -y "nrfjprog --reset --family nRF52 --program" \
               "$BUILD/zephyr/zephyr.hex --snr ${SEGGER}"
         nrfjprog --reset --family nRF52 --program \
               $BUILD/zephyr/zephyr.hex --snr ${SEGGER} || exit 1
      else
         ec -y "west flash --build-dir build_$BOARD"
         west flash --build-dir $BUILD || exit 1
      fi
      exit 0
   fi



#===============================================================================
# we -d   # build & run on dongle'
#===============================================================================

   if [ "$*" == "-d" ]
   then
      ec -g "=== building ..."
      we -b

      exit 0
   fi

#===============================================================================
# we -e:  # erase flash memory
#===============================================================================

  if [ "$*" == "-e" ]; then   # erase flash memory area
      ec -g '=== erasing nRF52 flash area of target ...'
      ec -y "nrfjprog --family nRF52 --eraseall --snr ${SEGGER}"
      nrfjprog --family nRF52 --eraseall --snr ${SEGGER} || exit 1
      exit 0
  fi

#===============================================================================
# list (west) supported HW boards: we --boards
#===============================================================================

   if [ "$1" == "--boards" ]; then
      west boards
      exit 0
   fi

#===============================================================================
# run (a built) program: we -r <port>
# - for BOARD=qemu_x86 or BOARD=qemu_qemu_cortex_m3 => QEMU emulator is invoked
# - otherwise JLinkExe is consulted to run application with output sent to
#   telnet port $TELPORT (if not set then port 19024 is used by default)
#===============================================================================

   if [ "$1" == "-r" ] && [ "$3" == "" ]; then
      if [ "$BOARD" == "qemu_x86" ] || [ "$BOARD" == "qemu_cortex_m3" ]; then
        ec -y 'export QEMU_EXTRA_FLAGS="-icount shift=0,align=off,sleep=on -rtc base=localtime,clock=host"'
        export QEMU_EXTRA_FLAGS="-icount shift=0,align=off,sleep=on -rtc base=localtime,clock=host"

        ec -y west build -t run
        west build -t run || exit 1

        exit 0
      fi

      if [ "$TELPORT" == "" ]; then
         TELPORT=19024
      fi

      if [ "$2" != "" ]; then
         TELPORT=$2
      fi

      if [ "$SEGGER" == "" ]; then
         ec -r "error: SEGGER j-link ID is not defined"
         echo  '       please set: export SEGGER=xxxxxxxxx (e.g., export SEGGER=682805980)'
         echo  '       (find SEGGER j-link ID on label of j-link adapter box)'
         exit 1
      fi

        # run program ...

      if [ "`which JLinkExe`" == "" ]; then
         ec -r 'error: JLinkExe is not installed!'
         echo  '       please install JLinkExe first before proceeding'
         exit 1
      fi

      CMD1="JLinkExe -device NRF52 -speed 4000 -if SWD -RTTTelnetport $TELPORT"
      CMD2="-AutoConnect 1 -SelectEmuBySN $SEGGER"
      ec -y $CMD1' '$CMD2

      JLinkExe -device NRF52 -speed 4000 -if SWD -RTTTelnetport $TELPORT \
               -AutoConnect 1 -SelectEmuBySN $SEGGER || exit 1
      exit 0
   fi

#===============================================================================
# we --flash-dongle   # flash to dongle(s)
#===============================================================================

   if [ "$*" == "--flash-dongle" ]; then
      if [ -d /dev/serial ]; then  # then we are on WSL platform
         we ---flash-dongle-wsl
      else                         # else we are on OSX or Linux platform
         we ---flash-dongle-osx
      fi
      exit 0
   fi

#===============================================================================
# we --dongle-osx   # print dongle device (or list of)'
#===============================================================================

   if [ "$*" == "--dongle-osx" ]; then
    _DEVICES=`ls /dev/tty* | grep usb | grep -v usbmodem000`
    #echo $_DEVICES

    for _DEV in $_DEVICES
    do
       _LEN=`echo $_DEV | wc -c`
       _EXPECT=`echo /dev/tty.usbmodemF53C902FCD6F1 | wc -c`

       if [ "$_LEN" == "$_EXPECT" ]; then
          echo $_DEV
       fi
    done
    exit 0

    _N=`ls /dev/tty* | grep usb | grep -v usbmodem000 | wc -w`

      exit 0
   fi

#===============================================================================
# we --dongle-wsl   # print dongle device (or list of)'
#===============================================================================

   if [ "$*" == "--dongle-wsl" ]; then
      _DEVICES=`ls /dev/serial/by-id | grep Bootloader`
      #echo $_DEVICES

      for _DEV in $_DEVICES
      do
         echo /dev/serial/by-id/$_DEV
      done
      exit 0
   fi

#===============================================================================
# we ---create-zip <zipfile>  # create zip file which we can flash to the dongle
#===============================================================================

   if [ "$1" == "---create-zip" ] && [ "$2" != "" ] && [ "$3" == "" ]; then
      ec -g "=== creating zip file for dongle ..."
      ZIP=$2

      OPTS1="--hw-version 52 --sd-req=0x00  --application $BUILD/zephyr/zephyr.hex"
      OPTS2='--application-version'

      ec -y "rfutil nrf5sdk-tools pkg generate  $OPTS1 $OPTS2 1 $ZIP"
      nrfutil nrf5sdk-tools pkg generate  $OPTS1 $OPTS2 1 $ZIP || exit 1

      exit 0
   fi

#===============================================================================
# we ---flash-dongle-osx   # build & run on dongle on OSX platform
#===============================================================================

   if [ "$*" == "---flash-dongle-osx" ]; then

        # create a zip file which we can flash to the dongle

      ZIP=$BUILD/zephyr/app-dongle.zip
      #we ---create-zip $ZIP

        # there can be multiple dongles with active bootloaders

      DEVICES=`we --dongle-osx`
      #ec -m $DEVICES

      for DEV in $DEVICES
      do
         ec -g "=== flashing to dongle ($DEV) ..."

         ec -y "nrfutil dfu usb-serial -pkg $ZIP -p $DEV"
         nrfutil dfu usb-serial -pkg $ZIP -p $DEV
      done
      exit 0
   fi

#===============================================================================
# we ---flash-dongle-wsl   # build & run on dongle on WSL platform
#===============================================================================

   if [ "$*" == "---flash-dongle-wsl" ]; then

        # create a zip file which we can flash to the dongle

      ZIP=$BUILD/zephyr/app-dongle.zip
      #we ---create-zip $ZIP

         # there can be multiple we flash multiple

      DEVICES=`we --dongle-wsl`
      ##ec -m $DEVICES

      for DEV in $DEVICES
      do
         ec -g "=== flashing to dongle ($DEV) ..."

         ec -y "nrfutil dfu usb-serial -pkg $ZIP -p $DEV"
         nrfutil dfu usb-serial -pkg $ZIP -p $DEV
      done
      exit 0
   fi

#===============================================================================
# standard call: we
#===============================================================================

   if [ "$*" == "" ]; then
      PROJECT="."

      #ec -y west build -b $BOARD $PROJECT
      #west build -b $BOARD $PROJECT || exit 1
      we -b

        # if board identifier refers to a dongle we copy zephyr.hex to $TMP
        # else we run program

      if [ "$BOARD" == "nrf52840dongle_nrf52840" ]; then
        # we --copy-tmp || exit 1
        we --flash-dongle
      else
        if [ "$BOARD" != "qemu_x86" ] && [ "$BOARD" != "qemu_cortex_m3" ]; then
          we -f || exit 1  # flash program
        fi
        we -r || exit 1  # run program
      fi
      exit 0
   fi

#===============================================================================
# we -l  # list labels of workdir info database
# we -L  # list labels of workdir info database with path
#===============================================================================

	if [ "$*" == "-l" ] || [ "$*" == "-L" ]; then
     ETC=$ETC

     if [ "$ETC" == "" ]; then
        ec -r "cannot access Zephyr version database: wd $*"
        echo  '  environment variable $ETC is not defined'
        exit 1
     fi

     if [ ! -d "$ETC" ]; then
        ec -r "no directory: ETC=$ETC"
        exit 1
     fi

     ec -g 'Zephyr version labels:'
     IDB=$ETC/zephyr

     if [ -d "$IDB" ]; then
	      for _KEY in `ls $IDB`
	      do
	         _INFO=$(idb -r $IDB $_KEY info)
	         _DIR=$(idb -r $IDB $_KEY dir)

           _LAB=$_KEY:'                              '
           if [ "$*" == "-L" ]; then
	            echo "  ${_LAB:0:12} $_INFO   ($_DIR)"
           else
	            echo "  ${_LAB:0:12} $_INFO"
           fi
	      done
     fi

     exit 0
  fi

#===============================================================================
# we -! <label> <info> <dir>
#===============================================================================

	if [ "$1" == "-!" ] && [ "$2" != "" ] && [ "$3" != "" ] \
                      && [ "$5" == "" ]; then
     if [ "$ETC" == "" ]; then
        ec -r "cannot add Zephyr version label: we $*"
        echo  '  environment variable ETC is not defined'
        echo  '  suggestion: $ export ETC=~/etc   # or something similar'
        exit 1
     fi

     if [ ! -d "$ETC" ]; then
        ec -r "no directory: ETC=$ETC"
        exit 1
     fi

     IDB=$ETC/zephyr
     if [ ! -d $IDB ]; then
        idb -c $IDB      # create workdir info database
     fi

     LABEL=${2%":"}      # strip off ':'
     if [ "$LABEL" == "$2" ]; then    # missing colon at end?
       ec -r "missing ':' at end of label: we $*"
       echo "  => try: we -! $2: '$3' $4"
     else  # all good => define label in info database
		     idb -s $IDB "$LABEL" info "$3"
		     if [ "$4" == "" ]; then          # current directory
		        idb -s $IDB "$LABEL" dir $(pwd)
		     else                             # given directory by $4
		        idb -s $IDB "$LABEL" dir "$4"
		     fi
     fi
     exit 0
  fi


#===============================================================================
# we --unlock  # unlock flash memory'
#===============================================================================

   if [ "$*" == "--unlock" ]; then
      ec -g '=== unlock nRF52 flash area of target ...'
      ec -y "nrfjprog --family nRF52 --recover --snr ${SEGGER}"
      nrfjprog --family nRF52 --recover --snr ${SEGGER} || exit 1
      exit 0
   fi

#===============================================================================
# cannot deal with anything else ...
#===============================================================================

   ec -r "error: we $*"
   we -?
   exit 1
